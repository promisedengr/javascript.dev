//8.
function connectedSum(n, edges) {
    let visit = new Array(n).fill(false)
    let graph = new Array(n)
    for (let i = 0; i < n; i++){
      graph[i] = []
    }
    let result = 0
    edges.forEach(edge => {
      const nodes = edge.split(' ')
      graph[parseInt(nodes[0]) - 1].push(parseInt(nodes[1]) - 1)
      graph[parseInt(nodes[1]) - 1].push(parseInt(nodes[0]) - 1)
    })
    for (let i = 0; i < n; i++) {
      if (!visit[i]) {
        let queue = [i]
        let cnt = 1
        visit[i] = true
        queue.push(i)
        while (queue.length > 0) {
          const cur = queue.shift()
          graph[cur].forEach(node => {
            if (!visit[node]) {
              cnt++;
              visit[node] = true
              queue.push(node)
            }
          })
        }
        result += Math.ceil(Math.sqrt(cnt))
      }
    }
    return result
}