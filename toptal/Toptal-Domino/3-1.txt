"Domino": We are given an S string, representing a domino tile chain. Each tile has an L-R format, where L and R are numbers from the 1..6 range. The tiles are separated by a comma. Some examples of a valid S chain are:


1. "6-3"
2. "4-3,5-1,2-2,1-3,4-4"
3. "1-1,3-5,5-2,2-3,2-4"


Devise a function that given an S string, returns the number of tiles in the longest matching group within S. A matching group is a set of tiles that match and that are subsequent in S. Domino tiles match, if the right side of a tile is the same as the left side of the following tile. "2-4,4-1" are matching tiles, but "5-2,1-6" are not.


domino("1-1,3-5,5-2,2-3,2-4") // should return 3.



function match(prev, next) {
  if (next[0] === prev[prev.length - 1]) {
    return `${prev}${next}`;
  }

  return false;
}

function domino(S) {
  const a = S.replace(/-/g, '').split(",");
  const temp = [a[0]];
  let tmpString = a[0];

  for (let i = 1; i < a.length; i++) {
    const result = match(tmpString, a[i]);
    if (result) {
      tmpString = result;
    } else {
      temp.push(tmpString);
      tmpString = a[i];
    }
  }

  temp.push(tmpString);

  let maxLen = temp[0].length;
  for (let i = 1; i < temp.length; i++) {
    if (maxLen < temp[i].length) {
      maxLen = temp[i].length;
    }
  }

  return maxLen / 2;
}

// 1. "6-3"
// 2. "4-3,5-1,2-2,1-3,4-4"
// 3. "1-1,3-5,5-2,2-3,2-4"
console.log(domino("1-1,3-5,5-2,2-3,2-4"));

console.log(domino("5-5,5-5,4-4,5-5,5-5,5-5,5-5,5-5,5-5,5-5")) // 7
console.log(domino("1-1,3-5,5-5,5-4,4-2,1-3")) // 4
console.log(domino("1-2,2-2,3-3,3-4,4-5,1-1,1-2")) // 3